import { useState, useEffect } from "react"; import { createClient } from "@supabase/supabase-js"; const supabaseUrl = "https://fjsaqdouxcxpkjiihjcp.supabase.co"; const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZqc2FxZG91eGN4cGtqaWloamNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwMDM0NjIsImV4cCI6MjA3MTU3OTQ2Mn0.x-Zsf_QzU60aNj4Tj8BJEawKOA3eSyLKz7MC07CWXsI"; const supabase = createClient(supabaseUrl, supabaseKey); export default function HomePage() { const [signals, setSignals] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { async function fetchSignals() { try { const { data, error } = await supabase.from("signals").select("*").order("created_at", { ascending: false }).limit(10); if (error) throw error; setSignals(data || []); } catch (err) { setError(err.message); } finally { setLoading(false); } } fetchSignals(); }, []); const getClassificationColor = (classification) => { switch (classification?.toLowerCase()) { case "hot": return "bg-red-500"; case "warm": return "bg-orange-500"; case "monitor": return "bg-green-500"; default: return "bg-gray-500"; } }; const scrollToSignals = () => { document.getElementById("signals-section").scrollIntoView({ behavior: "smooth" }); }; return ( <div className="min-h-screen bg-black text-white"> <div className="container mx-auto px-4 py-20"> <div className="text-center mb-16"> <h1 className="text-6xl font-bold mb-6 bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent">WASP AI</h1> <p className="text-2xl text-gray-300 mb-4">AI-Powered Deal Flow Management for Angels & Micro-VCs</p> <p className="text-lg text-gray-500 mb-8">Move Earlier, Smarter, with More Confidence</p> <button onClick={scrollToSignals} className="bg-gradient-to-r from-cyan-400 to-purple-600 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:scale-105 transition-transform">View Live Signals</button> </div> <div id="signals-section" className="mb-16"> <div className="text-center mb-12"> <h2 className="text-4xl font-bold text-cyan-400 mb-4">Live Startup Signals</h2> <p className="text-xl text-gray-400">Real-time signals from emerging startups</p> </div> {loading && ( <div className="text-center py-12"> <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400 mx-auto mb-4"></div> <p className="text-gray-400">Loading startup signals...</p> </div> )} {error && ( <div className="text-center py-12"> <p className="text-red-400">Error loading signals: {error}</p> </div> )} {!loading && !error && signals.length === 0 && ( <div className="text-center py-12"> <p className="text-gray-400">No signals found</p> </div> )} {!loading && !error && signals.length > 0 && ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {signals.map((signal) => ( <div key={signal.id} className="bg-gray-900 border border-gray-700 rounded-xl p-6 hover:border-cyan-400 transition-colors hover:scale-105"> <div className="flex justify-between items-center mb-4"> <h3 className="text-xl font-bold text-cyan-400">{signal.startup_name || "Unknown Startup"}</h3> <span className={`px-3 py-1 rounded-full text-xs font-bold text-white ${getClassificationColor(signal.classification)}`}>{signal.classification || "Unknown"}</span> </div> <p className="text-gray-300 mb-4 line-clamp-3">{signal.narrative || signal.description || "No description available"}</p> <div className="flex gap-4 text-sm"> <span className="text-cyan-400 font-medium">{signal.sector || "Unknown Sector"}</span> <span className="text-gray-500">via {signal.source || "Unknown Source"}</span> </div> </div> ))} </div> )} </div> </div> </div> ); }
